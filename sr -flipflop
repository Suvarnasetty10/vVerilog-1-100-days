//design code for sr flipflop
module srflipflop(s,r,q_bef,q_next,clk);
  input clk,s,r;
  output  reg q_bef;
  output q_next;
  always@(posedge clk) begin
    case({s,r})
      2'b00:q_bef<=q_bef;
      2'b01:q_bef<=1'b0;
      2'b10:q_bef<=1'b1;
      2'b11:q_bef<=1'bx;
    endcase
  end
  assign q_next=~q_bef;
endmodule
//Tb code for sr flipflop
module tb;
  reg clk,s,r;
  wire  q_bef,q_next;
  srflipflop u1(.clk(clk),.s(s),.r(r),.q_bef(q_bef),.q_next(q_next));
  initial begin
    clk=0;             
    forever #5 clk=~clk;
  end
    
  initial begin
    $monitor(" clk=%0b,s=%0b,r=%0b,q_bef=%0b,q_next=%0b",clk,s,r,q_bef,q_next);
    s=0;r=0;#10;
    s=0;r=1;#10;
    s=1;r=0;#10;
    s=1;r=1;#10;
    $finish;
  end
endmodule
//output:
# KERNEL:  clk=0,s=0,r=0,q_bef=x,q_next=x
# KERNEL:  clk=1,s=0,r=0,q_bef=x,q_next=x
# KERNEL:  clk=0,s=0,r=1,q_bef=x,q_next=x
# KERNEL:  clk=1,s=0,r=1,q_bef=0,q_next=1
# KERNEL:  clk=0,s=1,r=0,q_bef=0,q_next=1
# KERNEL:  clk=1,s=1,r=0,q_bef=1,q_next=0
# KERNEL:  clk=0,s=1,r=1,q_bef=1,q_next=0
# KERNEL:  clk=1,s=1,r=1,q_bef=x,q_next=x
  


















    
    
    
  
  
  
      
