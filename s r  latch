//design copde for sr latch
module srlatch(s,r,q_bef,q_next,enable);
  input s,r,enable;
  output  reg q_bef;
  output  wire q_next; 
  always@(s or r or enable) begin
    if(enable==0)
    q_bef<=q_bef;
    else
    case({s,r})
      //2'b00:q_bef<=q_bef;
      2'b01:q_bef<=1'b0;
      2'b10:q_bef<=1'b1;
      2'b11:q_bef<=1'bx;
      2'b00:q_bef<=q_bef;
    endcase
  end
  assign q_next=~q_bef;
endmodule
//tb copde for sr latch
module tb;
  reg s,r,enable;
  wire  q_bef,q_next;
  srlatch u1(.s(s),.r(r),.q_bef(q_bef),.q_next(q_next),.enable(enable));  
  initial begin
    $monitor(" enable=%0b,s=%0b,r=%0b,q_bef=%0b,q_next=%0b",enable,s,r,q_bef,q_next);
    //enable=0;s=0;r=0;#10;
    enable=1;s=0;r=1;#10;
    enable=1;s=1;r=0;#10;
    enable=1;s=1;r=1;#10;
    enable=0;s=0;r=0;#10;
    $finish;
  end
endmodule
//output:
# KERNEL:  enable=1,s=0,r=1,q_bef=0,q_next=1
# KERNEL:  enable=1,s=1,r=0,q_bef=1,q_next=0
# KERNEL:  enable=1,s=1,r=1,q_bef=x,q_next=x
# KERNEL:  enable=0,s=0,r=0,q_bef=x,q_next=x

















