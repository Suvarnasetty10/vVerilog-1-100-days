//design code for jk-flipflop
module jkflipflop(j,k,q_bef,q_next,clk);
  input clk,j,k;
  output  reg q_bef;
  output q_next;
  always@(posedge clk) begin
    case({j,k})
      2'b00:q_bef<=q_bef;
      2'b01:q_bef<=1'b0;
      2'b10:q_bef<=1'b1;
      2'b11:q_bef<=~q_bef;
    endcase
  end
  assign q_next=~q_bef;
endmodule
//tb code for jk-flipflop
module tb;
  reg clk,j,k;
  wire  q_bef,q_next;
  jkflipflop u1(.clk(clk),.j(j),.k(k),.q_bef(q_bef),.q_next(q_next));
  initial begin
    clk=0;             
    forever #5 clk=~clk;
  end
  initial begin
    $monitor(" clk=%0b,j=%0b,k=%0b,q_bef=%0b,q_next=%0b",clk,j,k,q_bef,q_next);
    j=0;k=0;#10;
    j=0;k=1;#10;
    j=1;k=0;#10;
    j=1;k=1;#10;
    $finish;
  end
endmodule
//output:
 clk=0,j=0,k=0,q_bef=x,q_next=x
 clk=1,j=0,k=0,q_bef=x,q_next=x
 clk=0,j=0,k=1,q_bef=x,q_next=x
 clk=1,j=0,k=1,q_bef=0,q_next=1
 clk=0,j=1,k=0,q_bef=0,q_next=1
 clk=1,j=1,k=0,q_bef=1,q_next=0
 clk=0,j=1,k=1,q_bef=1,q_next=0
 clk=1,j=1,k=1,q_bef=0,q_next=1

  


















    
    
    
  
  
  
